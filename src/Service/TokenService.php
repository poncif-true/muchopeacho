<?php


namespace App\Service;


use App\Entity\Peacher\Peacher;
use App\Entity\Token;
use App\Repository\Peacher\PeacherRepository;
use App\Repository\TokenRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;

/**
 * Class TokenService
 * @package App\Service
 */
class TokenService
{
    /** @var PeacherRepository $peacherRepository */
    protected $peacherRepository;
    /** @var TokenRepository $tokenRepository */
    protected $tokenRepository;
    /** @var EntityManagerInterface $em */
    protected $em;

    /**
     * TokenService constructor.
     * @param EntityManagerInterface $em
     */
    public function __construct(EntityManagerInterface $em)
    {
        $this->peacherRepository = $em->getRepository(Peacher::class);
        $this->tokenRepository = $em->getRepository(Token::class);
        $this->em = $em;
    }

    /**
     * Generate a token for account activation
     * @param string $email the email of the user's account
     * @return Token the token generated by the method
     * @throws UsernameNotFoundException if user can not be found with email
     * @throws \Exception
     */
    public function generateConfirmationToken(string $email): Token
    {
        $peacher = $this->peacherRepository->findOneBy(['email' => $email]);

        if (!$peacher instanceof Peacher) {
            throw new UsernameNotFoundException();
        }

        $token = new Token();
        $token->setUser($peacher)
            ->setType(Token::TYPE_SIGN_UP_CONFIRMATION)
            ->setValue($this->getUniqValue());

        $this->em->persist($token);
        $this->em->flush();

        return $token;
    }

    /**
     * Return a string of 128 (64*2) character's length plus uniq_id
     * @return string
     * @throws \Exception
     */
    protected function getUniqValue(): string
    {
        return uniqid(bin2hex(random_bytes(64)), true);
    }

    /**
     * Finds a Token by its value (key)
     * @param string|null $value
     * @return Token|null
     */
    public function getToken(string $value = null): ?Token
    {
        return $this->tokenRepository->findOneBy([
            'value' => $value,
        ]);
    }
}
