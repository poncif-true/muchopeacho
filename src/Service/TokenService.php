<?php


namespace App\Service;


use App\Entity\PasswordToken;
use App\Entity\Peacher\Peacher;
use App\Entity\SignUpConfirmationToken;
use App\Entity\Token;
use App\Repository\Peacher\PeacherRepository;
use App\Repository\TokenRepository;
use Doctrine\ORM\EntityManagerInterface;

/**
 * Class TokenService
 *
 * @package App\Service
 */
class TokenService
{
    /** @var PeacherRepository $peacherRepository */
    protected $peacherRepository;
    /** @var TokenRepository $tokenRepository */
    protected $tokenRepository;
    /** @var EntityManagerInterface $em */
    protected $em;

    /**
     * TokenService constructor.
     *
     * @param EntityManagerInterface $em
     */
    public function __construct(EntityManagerInterface $em)
    {
        $this->peacherRepository = $em->getRepository(Peacher::class);
        $this->tokenRepository = $em->getRepository(Token::class);
        $this->em = $em;
    }

    /**
     * Generate a token
     *
     * @param string $email      the email of the user's account
     * @param string $tokenClass the token class expected to be generated
     *
     * @return Token the token generated by the method
     * @throws \UnexpectedValueException if user can not be found with email
     * @throws \Exception
     */
    public function generateToken(string $email, string $tokenClass): Token
    {
        $peacher = $this->peacherRepository->findOneBy(['email' => $email]);

        if (!$peacher instanceof Peacher) {
            throw new \UnexpectedValueException('User cannot be found');
        }
        if (!class_exists($tokenClass)) {
            throw new \InvalidArgumentException('Unexisting token classname: ' . $tokenClass);
        }
        $token = new $tokenClass();
        if (!$token instanceof Token) {
            throw new \InvalidArgumentException('Invalid token classname: ' . $tokenClass);
        }
        /** @var Token $token */
        $token->setUser($peacher)
            ->setValue($this->getUniqValue());

        $this->em->persist($token);
        $this->em->flush();

        return $token;
    }

    /**
     * Return a string of 128 (64*2) character's length plus uniq_id
     *
     * @return string
     * @throws \Exception
     */
    protected function getUniqValue(): string
    {
        return uniqid(bin2hex(random_bytes(64)), true);
    }

    /**
     * Finds a Token by its value (key)
     *
     * @param string|null $value
     *
     * @return PasswordToken|SignUpConfirmationToken|null
     */
    public function getToken(string $value = null)
    {
        return $this->tokenRepository->findOneBy([
            'value' => $value,
        ]);
    }
}
